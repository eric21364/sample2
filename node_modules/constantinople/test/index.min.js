"use strict";var assert=require("assert"),constaninople=require("../");describe("isConstant(src)",function(){it('handles "[5 + 3 + 10]"',function(){assert(constaninople.isConstant("[5 + 3 + 10]")===!0)}),it("handles \"/[a-z]/.test('a')\"",function(){assert(constaninople.isConstant("/[a-z]/.test('a')")===!0)}),it("handles \"{'class': [('data')]}\"",function(){assert(constaninople.isConstant("{'class': [('data')]}")===!0)}),it('handles "Math.random()"',function(){assert(constaninople.isConstant("Math.random()")===!1)}),it('handles "Math.random("',function(){assert(constaninople.isConstant("Math.random(")===!1)}),it('handles "Math.floor(10.5)" with {Math: Math} as constants',function(){assert(constaninople.isConstant("Math.floor(10.5)",{Math:Math})===!0)}),it('handles "this.myVar"',function(){assert(constaninople.isConstant("this.myVar")===!1)}),it('handles "(function () { while (true); return 10; }())"',function(){assert(constaninople.isConstant("(function () { while (true); return 10; }())")===!1)})}),describe("toConstant(src)",function(){it('handles "[5 + 3 + 10]"',function(){assert.deepEqual(constaninople.toConstant("[5 + 3 + 10]"),[18])}),it("handles \"/[a-z]/.test('a')\"",function(){assert(constaninople.toConstant("/[a-z]/.test('a')")===!0)}),it("handles \"{'class': [('data')]}\"",function(){assert.deepEqual(constaninople.toConstant("{'class': [('data')]}"),{"class":["data"]})}),it('handles "Math.random()"',function(){try{constaninople.toConstant("Math.random()")}catch(t){return}assert(!1,"Math.random() should result in an error")}),it('handles "Math.random("',function(){try{constaninople.toConstant("Math.random(")}catch(t){return}assert(!1,"Math.random( should result in an error")}),it('handles "Math.floor(10.5)" with {Math: Math} as constants',function(){assert(10===constaninople.toConstant("Math.floor(10.5)",{Math:Math}))}),it('handles "(function () { while (true); return 10; }())"',function(){try{constaninople.toConstant("(function () { while (true); return 10; }())")}catch(t){return}assert(!1,"(function () { while (true); return 10; }()) should result in an error")})});