var hasBinary=require("./"),assert=require("better-assert"),fs=require("fs");describe("has-binarydata",function(){it("should work with buffer",function(){assert(hasBinary(fs.readFileSync("./test.js")))}),it("should work with an array that does not contain binary",function(){var t=[1,"cool",2];assert(!hasBinary(t))}),it("should work with an array that contains a buffer",function(){var t=[1,new Buffer("asdfasdf","utf8"),2];assert(hasBinary(t))}),it("should work with an object that does not contain binary",function(){var t={a:"a",b:[],c:1234,toJSON:'{"a": "a"}'};assert(!hasBinary(t))}),it("should work with an object that contains a buffer",function(){var t={a:"a",b:new Buffer("abc"),c:1234,toJSON:'{"a": "a"}'};assert(hasBinary(t))}),it("should work with null",function(){assert(!hasBinary(null))}),it("should work with undefined",function(){assert(!hasBinary(void 0))}),it("should work with a complex object that contains undefined and no binary",function(){var t={x:["a","b",123],y:void 0,z:{a:"x",b:"y",c:3,d:null},w:[]};assert(!hasBinary(t))}),it("should work with a complex object that contains undefined and binary",function(){var t={x:["a","b",123],y:void 0,z:{a:"x",b:"y",c:3,d:null},w:[],bin:new Buffer("xxx")};assert(hasBinary(t))}),global.ArrayBuffer&&it("should work with an ArrayBuffer",function(){assert(hasBinary(new ArrayBuffer))}),global.Blob&&it("should work with a Blob",function(){assert(hasBinary(new Blob))})});