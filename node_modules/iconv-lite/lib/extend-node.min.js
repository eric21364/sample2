"use strict";module.exports=function(e){var t=void 0;e.supportsNodeEncodingsExtension=!(new Buffer(0)instanceof Uint8Array),e.extendNodeEncodings=function(){if(!t){if(t={},!e.supportsNodeEncodingsExtension)return console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node"),void console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");var r={hex:!0,utf8:!0,"utf-8":!0,ascii:!0,binary:!0,base64:!0,ucs2:!0,"ucs-2":!0,utf16le:!0,"utf-16le":!0};Buffer.isNativeEncoding=function(e){return e&&r[e.toLowerCase()]};var i=require("buffer").SlowBuffer;if(t.SlowBufferToString=i.prototype.toString,i.prototype.toString=function(r,i,n){return r=String(r||"utf8").toLowerCase(),Buffer.isNativeEncoding(r)?t.SlowBufferToString.call(this,r,i,n):("undefined"==typeof i&&(i=0),"undefined"==typeof n&&(n=this.length),e.decode(this.slice(i,n),r))},t.SlowBufferWrite=i.prototype.write,i.prototype.write=function(r,i,n,s){if(isFinite(i))isFinite(n)||(s=n,n=void 0);else{var a=s;s=i,i=n,n=a}i=+i||0;var o=this.length-i;if(n?(n=+n,n>o&&(n=o)):n=o,s=String(s||"utf8").toLowerCase(),Buffer.isNativeEncoding(s))return t.SlowBufferWrite.call(this,r,i,n,s);if(r.length>0&&(0>n||0>i))throw new RangeError("attempt to write beyond buffer bounds");var u=e.encode(r,s);return u.length<n&&(n=u.length),u.copy(this,i,0,n),n},t.BufferIsEncoding=Buffer.isEncoding,Buffer.isEncoding=function(t){return Buffer.isNativeEncoding(t)||e.encodingExists(t)},t.BufferByteLength=Buffer.byteLength,Buffer.byteLength=i.byteLength=function(r,i){return i=String(i||"utf8").toLowerCase(),Buffer.isNativeEncoding(i)?t.BufferByteLength.call(this,r,i):e.encode(r,i).length},t.BufferToString=Buffer.prototype.toString,Buffer.prototype.toString=function(r,i,n){return r=String(r||"utf8").toLowerCase(),Buffer.isNativeEncoding(r)?t.BufferToString.call(this,r,i,n):("undefined"==typeof i&&(i=0),"undefined"==typeof n&&(n=this.length),e.decode(this.slice(i,n),r))},t.BufferWrite=Buffer.prototype.write,Buffer.prototype.write=function(r,i,n,s){var a=i,o=n,u=s;if(isFinite(i))isFinite(n)||(s=n,n=void 0);else{var c=s;s=i,i=n,n=c}if(s=String(s||"utf8").toLowerCase(),Buffer.isNativeEncoding(s))return t.BufferWrite.call(this,r,a,o,u);i=+i||0;var h=this.length-i;if(n?(n=+n,n>h&&(n=h)):n=h,r.length>0&&(0>n||0>i))throw new RangeError("attempt to write beyond buffer bounds");var l=e.encode(r,s);return l.length<n&&(n=l.length),l.copy(this,i,0,n),n},e.supportsStreams){var n=require("stream").Readable;t.ReadableSetEncoding=n.prototype.setEncoding,n.prototype.setEncoding=function(t,r){this._readableState.decoder=e.getDecoder(t,r),this._readableState.encoding=t},n.prototype.collect=e._collect}}},e.undoExtendNodeEncodings=function(){if(e.supportsNodeEncodingsExtension){if(!t)throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");delete Buffer.isNativeEncoding;var r=require("buffer").SlowBuffer;if(r.prototype.toString=t.SlowBufferToString,r.prototype.write=t.SlowBufferWrite,Buffer.isEncoding=t.BufferIsEncoding,Buffer.byteLength=t.BufferByteLength,Buffer.prototype.toString=t.BufferToString,Buffer.prototype.write=t.BufferWrite,e.supportsStreams){var i=require("stream").Readable;i.prototype.setEncoding=t.ReadableSetEncoding,delete i.prototype.collect}t=void 0}}};