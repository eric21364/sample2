var assert=require("assert"),after=require("../");test("exists",function(){assert("function"==typeof after,"after is not a function")}),test("after when called with 0 invokes",function(t){after(0,t)}),test("after 1",function(t){var e=after(1,t);e()}),test("after 5",function(t){for(var e=after(5,t),r=5;r--;)e()}),test("manipulate count",function(t){var e=after(1,t),r=5;for(e.count=r;r--;)e()}),test("after terminates on error",function(t){var e=after(2,function(e){assert.equal(e.message,"test"),t()});e(new Error("test")),e(new Error("test2"))}),test("gee",function(t){function e(e){assert.equal(e.message,1),t()}t=after(2,t);var r=after(3,e,function(e){assert.equal(e.message,2),t()});r(),r(new Error(1)),r(new Error(2))}),test("eee",function(t){function e(e){assert.equal(e.message,1),t()}t=after(3,t);var r=after(3,e,function(e){assert.equal(e.message,2),t()});r(new Error(1)),r(new Error(2)),r(new Error(2))}),test("gge",function(t){function e(e){assert.equal(e.message,1),t()}var r=after(3,e,function(t){assert.ok(!1)});r(),r(),r(new Error(1))}),test("egg",function(t){function e(e){assert.equal(e.message,1),t()}var r=after(3,e,function(t){assert.ok(!1)});r(new Error(1)),r(),r()}),test("throws on too many calls",function(t){var e=after(1,t);e(),assert["throws"](e,/after called too many times/)});