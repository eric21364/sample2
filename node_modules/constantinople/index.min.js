"use strict";function isConstant(t,e){if(t="("+t+")",lastSRC===t&&lastConstants===e)return lastRes;if(lastSRC=t,lastConstants=e,!isExpression(t))return lastRes=!1;var n;try{n=acorn.parse(t,{ecmaVersion:6,allowReturnOutsideFunction:!0,allowImportExportEverywhere:!0,allowHashBang:!0})}catch(i){return lastRes=!1}var r=!0;return walk.simple(n,{Statement:function(t){r&&STATEMENT_WHITE_LIST[t.type]!==!0&&(r=!1)},Expression:function(t){r&&EXPRESSION_WHITE_LIST[t.type]!==!0&&(r=!1)},MemberExpression:function(t){r&&(t.computed?r=!1:"_"===t.property.name[0]&&(r=!1))},Identifier:function(t){r&&(e&&t.name in e||(r=!1))}}),lastRes=r}function toConstant(t,e){if(!isConstant(t,e))throw new Error(JSON.stringify(t)+" is not constant.");return Function(Object.keys(e||{}).join(","),"return ("+t+")").apply(null,Object.keys(e||{}).map(function(t){return e[t]}))}function isExpression(src){try{return eval('throw "STOP"; (function () { return ('+src+"); })()"),!1}catch(err){return"STOP"===err}}var acorn=require("acorn"),walk=require("acorn/dist/walk"),lastSRC="(null)",lastRes=!0,lastConstants=void 0,STATEMENT_WHITE_LIST={EmptyStatement:!0,ExpressionStatement:!0},EXPRESSION_WHITE_LIST={ParenthesizedExpression:!0,ArrayExpression:!0,ObjectExpression:!0,SequenceExpression:!0,TemplateLiteral:!0,UnaryExpression:!0,BinaryExpression:!0,LogicalExpression:!0,ConditionalExpression:!0,Identifier:!0,Literal:!0,ComprehensionExpression:!0,TaggedTemplateExpression:!0,MemberExpression:!0,CallExpression:!0,NewExpression:!0};module.exports=isConstant,isConstant.isConstant=isConstant,isConstant.toConstant=toConstant;