function Encoder(){}function encodeAsString(t){var e="",r=!1;return e+=t.type,(exports.BINARY_EVENT==t.type||exports.BINARY_ACK==t.type)&&(e+=t.attachments,e+="-"),t.nsp&&"/"!=t.nsp&&(r=!0,e+=t.nsp),null!=t.id&&(r&&(e+=",",r=!1),e+=t.id),null!=t.data&&(r&&(e+=","),e+=json.stringify(t.data)),debug("encoded %j as %s",t,e),e}function encodeAsBinary(t,e){function r(t){var r=binary.deconstructPacket(t),n=encodeAsString(r.packet),i=r.buffers;i.unshift(n),e(i)}binary.removeBlobs(t,r)}function Decoder(){this.reconstructor=null}function decodeString(t){var e={},r=0;if(e.type=Number(t.charAt(0)),null==exports.types[e.type])return error();if(exports.BINARY_EVENT==e.type||exports.BINARY_ACK==e.type){for(var n="";"-"!=t.charAt(++r)&&(n+=t.charAt(r),r!=t.length););if(n!=Number(n)||"-"!=t.charAt(r))throw new Error("Illegal attachments");e.attachments=Number(n)}if("/"==t.charAt(r+1))for(e.nsp="";++r;){var i=t.charAt(r);if(","==i)break;if(e.nsp+=i,r==t.length)break}else e.nsp="/";var a=t.charAt(r+1);if(""!==a&&Number(a)==a){for(e.id="";++r;){var i=t.charAt(r);if(null==i||Number(i)!=i){--r;break}if(e.id+=t.charAt(r),r==t.length)break}e.id=Number(e.id)}return t.charAt(++r)&&(e=tryParse(e,t.substr(r))),debug("decoded %s as %j",t,e),e}function tryParse(t,e){try{t.data=json.parse(e)}catch(r){return error()}return t}function BinaryReconstructor(t){this.reconPack=t,this.buffers=[]}function error(t){return{type:exports.ERROR,data:"parser error"}}var debug=require("debug")("socket.io-parser"),json=require("json3"),Emitter=require("component-emitter"),binary=require("./binary"),isBuf=require("./is-buffer");exports.protocol=4,exports.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],exports.CONNECT=0,exports.DISCONNECT=1,exports.EVENT=2,exports.ACK=3,exports.ERROR=4,exports.BINARY_EVENT=5,exports.BINARY_ACK=6,exports.Encoder=Encoder,exports.Decoder=Decoder,Encoder.prototype.encode=function(t,e){if(debug("encoding packet %j",t),exports.BINARY_EVENT==t.type||exports.BINARY_ACK==t.type)encodeAsBinary(t,e);else{var r=encodeAsString(t);e([r])}},Emitter(Decoder.prototype),Decoder.prototype.add=function(t){var e;if("string"==typeof t)e=decodeString(t),exports.BINARY_EVENT==e.type||exports.BINARY_ACK==e.type?(this.reconstructor=new BinaryReconstructor(e),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",e)):this.emit("decoded",e);else{if(!isBuf(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,this.emit("decoded",e))}},Decoder.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},BinaryReconstructor.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length==this.reconPack.attachments){var e=binary.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},BinaryReconstructor.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]};